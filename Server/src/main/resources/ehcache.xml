<?xml version="1.0" encoding="UTF-8"?>
<ehcache updateCheck="false">

	<diskStore path="java.io.tmpdir/ehcache/hibernate" />


	<!-- mcast_addr=231.12.21.132; -->
	<cacheManagerPeerProviderFactory
		class="net.sf.ehcache.distribution.jgroups.JGroupsCacheManagerPeerProviderFactory"
		properties="connect=UDP(mcast_addr=230.0.0.1;mcast_port=45566;tos=32;mcast_recv_buf_size=120000;mcast_send_buf_size=80000;
         max_bundle_size=64K;max_bundle_timeout=30;
         ip_ttl=32;enable_diagnostics=true;thread_naming_pattern=cl;
         timer_type=new;timer.min_threads=4;timer.max_threads=10;timer.keep_alive_time=3000;timer.queue_max_size=500;
         thread_pool.enabled=true;thread_pool.min_threads=2;thread_pool.max_threads=8;thread_pool.keep_alive_time=5000;
         thread_pool.queue_enabled=true;thread_pool.queue_max_size=10000;thread_pool.rejection_policy=discard;oob_thread_pool.enabled=true;
         oob_thread_pool.min_threads=1;oob_thread_pool.max_threads=8;oob_thread_pool.keep_alive_time=5000;
         oob_thread_pool.queue_enabled=false;oob_thread_pool.queue_max_size=100;oob_thread_pool.rejection_policy=Run):
        PING(timeout=2000;num_initial_members=6):
        MERGE2(min_interval=5000;max_interval=10000):
        VERIFY_SUSPECT(timeout=1500):
        pbcast.NAKACK(use_mcast_xmit=true;discard_delivered_msgs=true;retransmit_timeout=1200):
        UNICAST(timeout=1200):
        pbcast.STABLE(desired_avg_gossip=20000;stability_delay=1000;max_bytes=4M):
        pbcast.GMS(print_local_addr=true;join_timeout=3000;view_bundling=true):
        FRAG2(frag_size=60K)"
		propertySeparator="::" />

	<defaultCache maxEntriesLocalHeap="10000" eternal="false"
		timeToIdleSeconds="300" timeToLiveSeconds="600" overflowToDisk="true"
		maxEntriesLocalDisk="100000" diskPersistent="false">

		<cacheEventListenerFactory
			class="net.sf.ehcache.distribution.jgroups.JGroupsCacheReplicatorFactory"
			properties="replicateAsynchronously=true, replicatePuts=true,
            replicateUpdates=true,replicateUpdatesViaCopy=true,
            replicateRemovals=true,asynchronousReplicationIntervalMillis=200" />
		<bootstrapCacheLoaderFactory
			class="net.sf.ehcache.distribution.jgroups.JGroupsBootstrapCacheLoaderFactory"
			properties="bootstrapAsynchronously=true,maximumChunkSizeBytes=50000000" />

	</defaultCache>
	
	
	<cache name="org.hibernate.cache.StandardQueryCache"
        maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="600"
        timeToLiveSeconds="600" overflowToDisk="true">
                                                               
        <cacheEventListenerFactory
            class="net.sf.ehcache.distribution.jgroups.JGroupsCacheReplicatorFactory"
            properties="replicateAsynchronously=true, replicatePuts=true,
            replicateUpdates=true,replicateUpdatesViaCopy=true,
            replicateRemovals=true,asynchronousReplicationIntervalMillis=200" />
                                                               
        <bootstrapCacheLoaderFactory
            class="net.sf.ehcache.distribution.jgroups.JGroupsBootstrapCacheLoaderFactory"
            properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=50000000" />
                                                               
    </cache>
                                                               
    <!--Hibernate使用时间戳区域来决定被高速缓存的查询结果集是否是失效的。当你重新执行了一个启用了高速缓存的查询时，Hibernate就在时间戳缓存中查找对被查询的（几张）表所做的最近插入、更新或删除的时间戳。如果找到的时间戳晚于高速缓存查询结果的时间戳，那么缓存结果将被丢弃，重新执行一次查询。 -->
	<cache name="org.hibernate.cache.UpdateTimestampsCache"
        maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="600"
        timeToLiveSeconds="600" overflowToDisk="true">
                                                               
        <cacheEventListenerFactory
            class="net.sf.ehcache.distribution.jgroups.JGroupsCacheReplicatorFactory"
            properties="replicateAsynchronously=true, replicatePuts=true,
            replicateUpdates=true,replicateUpdatesViaCopy=true,
            replicateRemovals=true,asynchronousReplicationIntervalMillis=200" />
        <bootstrapCacheLoaderFactory
            class="net.sf.ehcache.distribution.jgroups.JGroupsBootstrapCacheLoaderFactory"
            properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=50000000" />
                                                               
    </cache>
	
	<!-- 指定区域cache：通过name指定，name对应到Hibernate中的区域名即可 -->
	<!-- <cache name="org.persistence.User" eternal="false" maxEntriesLocalHeap="1000" 
		overflowToDisk="true" maxEntriesLocalDisk="10000" maxElementsInMemory="200" 
		timeToIdleSeconds="1200" timeToLiveSeconds="1200"> </cache> -->

</ehcache>

<!-- maxElementsInMemory=“10000” //Cache中最多允许保存的数据对象的数量 external=“false” 
	//缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期 timeToIdleSeconds=“1000” //缓存数据钝化时间(设置对象在它过期之前的空闲时间) 
	timeToLiveSeconds=“1000” //缓存数据的生存时间(设置对象在它过期之前的生存时间) overflowToDisk=“false” 
	/> //内存不足时，是否启用磁盘缓存 memoryStoreEvictionPolicy="LRU" //内存不足时数据对象的清除策略 ehcache中缓存的3种清空策略： 
	FIFO(first in first out):先进先出 LFU( Less Frequently Used):一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。 
	LRU(Least Recently Used):最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。 -->